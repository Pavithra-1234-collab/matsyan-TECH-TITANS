// DATA ABSTRACTION 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('/mock_fish_catch_dataset_10000.csv')

# Date features
df['Date'] = pd.to_datetime(df['Date'])
df['Day'] = df['Date'].dt.day
df['Month'] = df['Date'].dt.month
df['Weekday'] = df['Date'].dt.weekday
df.drop(columns=['Date'], inplace=True)

# Encode categorical
for col in ['Tide', 'Moon_Phase', 'Fish_Species']:
    df[col] = LabelEncoder().fit_transform(df[col])

# Split
X = df.drop(columns=['Catch_kg'])
y = df['Catch_kg']
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Model
lr = LinearRegression()
lr.fit(x_train, y_train)

// TEST CASE
# Predictions
y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

# Print predictions
print("Train Predictions:\n", y_lr_train_pred)
print("Test Predictions:\n", y_lr_test_pred)

// SPLILTING OF DATA 
from sklearn.metrics import mean_squared_error, r2_score

# Predict
y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

# Metrics
lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

# Output
print('LR MSE (Train):', lr_train_mse)
print('LR R2 (Train):', lr_train_r2)
print('LR MSE (Test):', lr_test_mse)
print('LR R2 (Test):', lr_test_r2)

// TABULATION OF SPLITTING 
import pandas as pd

lr_result = pd.DataFrame([[
    'Linear Regression',
    lr_train_mse,
    lr_train_r2,
    lr_test_mse,
    lr_test_r2
]], columns=[
    'Model', 'Train MSE', 'Train R²', 'Test MSE', 'Test R²'
])

print(lr_result)

// Data training
import pandas as pd
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load example dataset
data = load_diabetes()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)

# Train-test split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(x_train, y_train)

# Predictions
y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)

# Evaluation
rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)
rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

# Display results
rf_result = pd.DataFrame([['Random Forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]],
                         columns=['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2'])
print(rf_result)

// to display the results
from sklearn.linear_model import LinearRegression

# Train Linear Regression model
lr = LinearRegression()
lr.fit(x_train, y_train)

# Predictions
y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

# Evaluation
lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)
lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

# Results DataFrame
lr_result = pd.DataFrame([['Linear Regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]],
                         columns=['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2'])

df_models = pd.concat([lr_result, rf_result], axis=0)
df_models.reset_index(drop=True, inplace=True)
print(df_models)
